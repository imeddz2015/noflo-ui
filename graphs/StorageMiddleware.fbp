INPORT=Dispatch.IN:IN
OUTPORT=Passed.OUT:PASS
OUTPORT=NewActions.OUT:NEW

'noflo:ready,storage:load:*,storage:save:*,storage:delete:*,storage:open' -> ROUTES Dispatch(ui/DispatchAction)
Dispatch PASS -> IN Passed(core/Merge)

# New actions generated by this middleware
'storage:db' -> ACTION StorageDbAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:ready' -> ACTION StorageReadyAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:load:all' -> ACTION StorageInitialLoadAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:stored:project' -> ACTION StorageProjectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:stored:graph' -> ACTION StorageGraphAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:stored:component' -> ACTION StorageComponentAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:stored:spec' -> ACTION StorageSpecAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:stored:runtime' -> ACTION StorageRuntimeAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:removed:project' -> ACTION RemovedProjectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:removed:graph' -> ACTION RemovedGraphAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:removed:component' -> ACTION RemovedComponentAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:removed:spec' -> ACTION RemovedSpecAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:removed:runtime' -> ACTION RemovedRuntimeAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:error' -> ACTION StorageErrorAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'storage:open' -> ACTION StorageOpenAction(ui/SetAction) OUT -> IN Passed
'application:hash' -> ACTION ApplicationHashAction(ui/SetAction) OUT -> IN NewActions(core/Merge)

# Prepare IndexedDB database
'noflo-ui' -> STRING DbName(strings/SendString)
Dispatch HANDLE[0] -> IN DbName OUT -> NAME PrepareStorage(ui/PrepareStorage)
PrepareStorage DB -> IN StorageDbAction
# When we have database, we want to trigger loading of local data
PrepareStorage DB -> IN StorageInitialLoadAction
PrepareStorage ERROR -> IN StorageErrorAction

# Loading data from the DB
Dispatch HANDLE[1] -> IN LoadData(ui/LoadData)
LoadData PROJECT -> IN StorageProjectAction
LoadData GRAPH -> IN StorageGraphAction
LoadData COMPONENT -> IN StorageComponentAction
LoadData SPEC -> IN StorageSpecAction
LoadData RUNTIME -> IN StorageRuntimeAction
LoadData COMPLETE -> IN StorageReadyAction
LoadData ERROR -> IN StorageErrorAction

# Saving data to the DB
Dispatch HANDLE[2] -> IN SplitSave(core/Split)
SplitSave OUT -> IN OpenNewProject(ui/OpenNewProject)
SplitSave OUT -> IN SaveData(ui/SaveData)
SaveData PROJECT -> PROJECT OpenNewProject
OpenNewProject OUT -> IN StorageProjectAction
OpenNewProject HASH -> IN ApplicationHashAction
SaveData GRAPH -> IN StorageGraphAction
SaveData COMPONENT -> IN StorageComponentAction
SaveData SPEC -> IN StorageSpecAction
SaveData RUNTIME -> IN StorageRuntimeAction
SaveData ERROR -> IN StorageErrorAction

# Removing data from the DB
Dispatch HANDLE[3] -> IN DeleteData(ui/DeleteData)
DeleteData PROJECT -> IN RemovedProjectAction
DeleteData GRAPH -> IN RemovedGraphAction
DeleteData COMPONENT -> IN RemovedComponentAction
DeleteData SPEC -> IN RemovedSpecAction
DeleteData RUNTIME -> IN RemovedRuntimeAction
DeleteData ERROR -> IN StorageErrorAction

# Open a local project
Dispatch HANDLE[4] -> IN OpenProject(ui/OpenProject)
OpenProject OUT -> IN StorageOpenAction
OpenProject ERROR -> IN StorageErrorAction
